{"Name":"Liquid Floating Action Button","Id":2339,"Alias":"liquidfloatingactionbutton","Description":"\nThe Liquid Floating Action Button is a floating action button in liquid state.\n\n##  Using LiquidFloatingActionButton\n\n`LiquidFloatingActionButton` can be used in both storyboards and code-behind. Once instantiated, it can be used to\nprovide an expanding menu:\n\n    var frame = new CGRect(16, 16, 56, 56);\n    var button = new LiquidFloatingActionButton(frame);\n    \n    // add cells\n    button.Cells = new List\u003cLiquidFloatingCell\u003e {\n        new LiquidFloatingCell(UIImage.FromBundle(\"first\")),\n        new LiquidFloatingCell(UIImage.FromBundle(\"second\")),\n        new LiquidFloatingCell(UIImage.FromBundle(\"third\"))\n    };\n\n    // wait for events\n    button.CellSelected += (sender, e) =\u003e {\n        // read the event values\n        var selectedCell = e.Cell;\n        var selectedCellIndex = e.Index;\n        \n        // close the button\n        button.Close();\n    };\n\n## Using Properties\n\n`LiquidFloatingActionButton` is fully supported in storyboards and in the storyboard designer. \nThere are several properties that are available in the designer or code:\n\n  * `AnimateStyle`  \n    The direction that the cells open in (Up/Down/Left/Right)\n    \n  * `CellRadiusRatio`  \n    The size ratio of the cells to the button\n    \n  * `Cells`  \n    The collection of cells that will appear when the button is tapped\n    \n  * `Color`  \n    The color of the button and the cells\n    \n  * `EnableShadow`  \n    The value representing whether the button and the cells have shadows\n    \n  * `IsClosed`  \n    The value representing whether the button is expanded\n    \n  * `Responsible`  \n    The value representing whether the cells automatically lighten when tapped\n    \n## Using Events\n\nAlong with the various properties, there is support for listening to events:\n    \n  * `CellSelected`  \n    The event that is raised when a cell is selected\n\n## Using LiquidFloatingCell Properties\n\nEach `LiquidFloatingCell` added to the `LiquidFloatingActionButton` also has a set of properties:\n    \n  * `ActionButton`  \n    The button that contains this cell\n    \n  * `Responsible`  \n    The value representing whether the cells automatically lighten when tapped\n    \n  * `View`  \n    The view that is used to provide the cell icon (usually a `UIImageView`) \n","Version":"1.0.0.1","Summary":"The LiquidFloatingActionButton is a floating action button in liquid state.","QuickStart":"\nThe Liquid Floating Action Button is a floating action button in liquid state.\n\n##  Using LiquidFloatingActionButton\n\n`LiquidFloatingActionButton` can be used in both storyboards and code-behind. Once instantiated, it can be used to\nprovide an expanding menu:\n\n    var frame = new CGRect(16, 16, 56, 56);\n    var button = new LiquidFloatingActionButton(frame);\n    \n    // add cells\n    button.Cells = new List\u003cLiquidFloatingCell\u003e {\n        new LiquidFloatingCell(UIImage.FromBundle(\"first\")),\n        new LiquidFloatingCell(UIImage.FromBundle(\"second\")),\n        new LiquidFloatingCell(UIImage.FromBundle(\"third\"))\n    };\n\n    // wait for events\n    button.CellSelected += (sender, e) =\u003e {\n        // read the event values\n        var selectedCell = e.Cell;\n        var selectedCellIndex = e.Index;\n        \n        // close the button\n        button.Close();\n    };\n\n## Using Properties\n\n`LiquidFloatingActionButton` is fully supported in storyboards and in the storyboard designer. \nThere are several properties that are available in the designer or code:\n\n  * `AnimateStyle`  \n    The direction that the cells open in (Up/Down/Left/Right)\n    \n  * `CellRadiusRatio`  \n    The size ratio of the cells to the button\n    \n  * `Cells`  \n    The collection of cells that will appear when the button is tapped\n    \n  * `Color`  \n    The color of the button and the cells\n    \n  * `EnableShadow`  \n    The value representing whether the button and the cells have shadows\n    \n  * `IsClosed`  \n    The value representing whether the button is expanded\n    \n  * `Responsible`  \n    The value representing whether the cells automatically lighten when tapped\n    \n## Using Events\n\nAlong with the various properties, there is support for listening to events:\n    \n  * `CellSelected`  \n    The event that is raised when a cell is selected\n\n## Using LiquidFloatingCell Properties\n\nEach `LiquidFloatingCell` added to the `LiquidFloatingActionButton` also has a set of properties:\n    \n  * `ActionButton`  \n    The button that contains this cell\n    \n  * `Responsible`  \n    The value representing whether the cells automatically lighten when tapped\n    \n  * `View`  \n    The view that is used to provide the cell icon (usually a `UIImageView`) \n","Hash":"9f00452b65879f9d4d90aaf63a5bacf8","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}